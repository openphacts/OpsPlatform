import java.util.ArrayList;
import java.util.Iterator;
import java.io.IOException;

import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.HColumnDescriptor;
import org.apache.hadoop.hbase.HTableDescriptor;
import org.apache.hadoop.hbase.client.Get;
import org.apache.hadoop.hbase.client.HBaseAdmin;
import org.apache.hadoop.hbase.client.HTable;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.ResultScanner;
import org.apache.hadoop.hbase.client.Scan;
import org.apache.hadoop.hbase.util.Bytes;
import org.apache.hadoop.conf.Configuration;


public class HBaseUtil {
	public static void createTable(HBaseAdmin hbase, String name) throws IOException {
	    
	    if (hbase.tableExists(name) == false) {
	    	HTableDescriptor desc = new HTableDescriptor(name);
	    	HColumnDescriptor literal = new HColumnDescriptor("literal".getBytes());
	    	desc.addFamily(literal);
	    	hbase.createTable(desc);
	    }
	}
	
	public static void createColumnFamilies(HBaseAdmin hbase, String table, ArrayList<String> columns)  throws IOException {
		HTableDescriptor desc = hbase.getTableDescriptor(table.getBytes());
		for (Iterator iter = columns.iterator(); iter.hasNext();) {
			String columnName = (String)iter.next();
			HColumnDescriptor c = new HColumnDescriptor(columnName.getBytes());
			desc.addFamily(c);
		}
	}
	
	public static void addRow(HTable table, String key, String columnFam, String columnName, String val) {
	    Put row = new Put(Bytes.toBytes(key));
	    row.add(Bytes.toBytes(columnFam), Bytes.toBytes(columnName), Bytes.toBytes(val));
	    table.add(row);
	}
}
