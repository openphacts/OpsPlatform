import java.util.ArrayList;
import java.util.Iterator;
import java.io.IOException;

import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.HColumnDescriptor;
import org.apache.hadoop.hbase.HTableDescriptor;
import org.apache.hadoop.hbase.client.Get;
import org.apache.hadoop.hbase.client.HBaseAdmin;
import org.apache.hadoop.hbase.client.HTable;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.ResultScanner;
import org.apache.hadoop.hbase.client.Scan;
import org.apache.hadoop.hbase.util.Bytes;
import org.apache.hadoop.conf.Configuration;


public class HBaseUtil {
	public static void createTable(String name) throws IOException {
	}
	
	public static void createColumnFamilies(String table, ArrayList<String> columns)  throws IOException {
		HBaseConfiguration conf = new HBaseConfiguration();
	    conf.set("hbase.master","localhost:60000");
	    HBaseAdmin hbase = new HBaseAdmin(conf);
	    
	    if (hbase.tableExists(table) == false) {
	    	HTableDescriptor desc = new HTableDescriptor(table);
	    	HColumnDescriptor literal = new HColumnDescriptor("literal".getBytes());
	    	desc.addFamily(literal);
			
	    	ArrayList<HColumnDescriptor> descriptors = new ArrayList();
			for (Iterator iter = columns.iterator(); iter.hasNext();) {
				String columnName = ((String)iter.next()).replaceAll("[^A-Za-z0-9 ]", "");
				System.out.println("COLUMN: " + columnName);
				
				HColumnDescriptor c = new HColumnDescriptor(columnName.getBytes());
//				descriptors.add(c);
			}
			
			for (Iterator iter = descriptors.iterator(); iter.hasNext();) {
//				desc.addFamily((HColumnDescriptor)iter.next());
			}
			
	    	hbase.createTable(desc);
	    }
	}
	
	public static void addRow(HTable table, String key, String columnFam, String columnName, String val) throws IOException {
	    Put row = new Put(Bytes.toBytes(key));
	    row.add(Bytes.toBytes(columnFam), Bytes.toBytes(columnName), Bytes.toBytes(val));
	    table.put(row);
	}
}
